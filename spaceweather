#!/usr/bin/env bash
#
# spaceweather

# BASH MODES
set -u
set -o pipefail

# CONSTANTS
readonly HOME_DIR="$( cd "$( dirname $0 )" ; pwd )"
readonly INCLUDES_DIR="${HOME_DIR}/includes"

# INCLUDES
source "${INCLUDES_DIR}/bp.sh"
source "${INCLUDES_DIR}/spaceweather_vars.sh"
source "${INCLUDES_DIR}/spaceweather_functions.sh"

# MAIN
main() {

  set +u
  [ -z "$1" ] && bp::msg "${t_bold}${t_red}ERROR:${t_normal} No argument received - exiting" && echo && usage && exit 1
  set -u

  # Ensure directories exist
  setup_directories

  # Parse arguments... crudely
  OPTS=$@
  for opt in ${OPTS[@]} ; do
    case $opt in
      "--update") { bp::vmsg "Updating datasource(s)... " ; update_datasource ; bp::vmsg "update completed" ; exit $? ;} ;;
      "--help") usage && exit ;;
      --*) bp::abrt "uknown option: ${opt}" ;;
      -*) bp::abrt "uknown option: ${opt}" ;;
    esac
  done

  # Get list of measurement functions
  declare -a measurements
  if ! list_measurements >/dev/null 2>&1 ; then
    bp::abrt "no measurement functions found"
  else
    measurements=( $( list_measurements ) )
  fi

  # Test that argument is an acceptable measurement
  remaining_opts=( $@ )
  for remaining_opt in "${remaining_opts[@]}" ; do
    containsElement "${remaining_opt}" "${measurements[@]}"
    if [ $? -ne 0 ]; then
      bp::abrt "${remaining_opt} is not a valid measurement or option"
    fi
  done

  # Get latest data
  update_datasource || bp::abrt "Unable to retreive latest data"

  if [ -n "$1" ]; then
    measurements=( $( echo $@ ) )
    for measurement in "${measurements[@]}" ; do
      measurement_result="$( ${measurement} 2>/dev/null )"
      measurement_ec=$?
      if [ ${measurement_ec} -eq 0 ]; then
        echo "${measurement}: $( ${measurement} 2>/dev/null ; measurement_ec=$? )"
      elif [ ${measurement_ec} -eq 127 ]; then
        bp::abrt "Measurement ${measurement} not found"
      else
        echo "${measurement}: 9999"
      fi
    done
  else
    abrt "ERROR: no measurement found."
  fi

}

main $@
